game:GetService("Players").LocalPlayer.Idled:Connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

local Player = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local isTriple = "Single"

function GetNearestEgg()
    local nearr = math.huge
    local near
    local plr = Player.Character.HumanoidRootPart

    for i, v in pairs(game:GetService("Workspace").Scripts.Eggs:GetChildren()) do
        if (plr.CFrame.p - v.Egg.Egg.CFrame.p).Magnitude < nearr then
            near = v.Name
            nearr = (plr.CFrame.p - v.Egg.Egg.CFrame.p).Magnitude
        end
    end
    return near
end

local DiscordLib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/discord%20lib.txt")()

local win = DiscordLib:Window("Soggy Hub")

local serv = win:Server("Rebirth Champions X", "")

local btns = serv:Channel("Main")

local hum = game.Players.LocalPlayer.Character.HumanoidRootPart

btns:Seperator()

btns:Toggle("Auto Clicks",false, function(bool)
    _G.autoclick = bool

    task.spawn(function()
        while task.wait() do
            if not _G.autoclick then break end
            ReplicatedStorage.Events.Click:FireServer()
        end
    end)
end)

btns:Seperator()

local btns = serv:Channel("Eggs")

btns:Seperator()

btns:Toggle("Open Nearest Egg",false, function(bool)
    _G.autoegg = bool

    task.spawn(function()
        while task.wait() do
            if not _G.autoegg then break end    
            local eggy = GetNearestEgg() 
            ReplicatedStorage.Functions.Unbox:InvokeServer(eggy,isTriple)
        end
    end)
end)

btns:Seperator()

btns:Toggle("Triple Egg",false, function(bool)
    asd = bool

    if asd then
        isTriple = "Triple"
    else
        isTriple = "Single"
    end
end)

btns:Seperator()

btns:Toggle("Equip Best",false, function(bool)
    _G.autobest = bool

    task.spawn(function()
        while task.wait(10) do
            if not _G.autobest then break end
            firesignal(Player.PlayerGui.MainUI.PetsFrame.Additional.EquipBest.Click.MouseButton1Up)
        end
    end)
end)

btns:Seperator()

btns:Toggle("Craft All Pets",false, function(bool)
    _G.autocraft = bool

    task.spawn(function()
        while task.wait(3) do
            if not _G.autocraft then break end
            firesignal(Player.PlayerGui.MainUI.PetsFrame.Additional.CraftAll.Click.MouseButton1Up)
        end
    end)
end)

btns:Seperator()

btns:Toggle("Auto Update",false, function(bool)
    _G.autoupgrade = bool

    task.spawn(function()
        while task.wait() do
            if not _G.autoupgrade then break end
            for i, v in pairs(require(ReplicatedStorage.Modules.UpgradesShop)) do
                ReplicatedStorage.Functions.Upgrade:InvokeServer(tostring(i))
            end
        end
    end)
end)

local btns = serv:Channel("Gamepasses")

btns:Seperator()

btns:Button("Unlock Gamepasses", function()
    for i, v in pairs(Player.Passes:GetChildren()) do
        v.Value = true
    end
end)

local btns = serv:Channel("Misc")

btns:Seperator()

btns:Toggle("Auto Buy Potions",false, function(bool)
    _G.autopotion = bool

    task.spawn(function()
        while task.wait() do
            if not _G.autopotion then break end
            for i, v in pairs(require(ReplicatedStorage.Modules.Potions)) do
                ReplicatedStorage.Events.Potion:FireServer(tostring(i))
            end
        end
    end)
end)

local btns = serv:Channel("Player")

btns:Seperator()

local sldr = btns:Slider("Walkspeed!", 20, 200, 0, function(t)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = t
end)

btns:Seperator()

local sldr = btns:Slider("JumpPower!", 20, 500, 0, function(t)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = t
end)

btns:Seperator()

btns:Toggle("GodMode",false, function(bool)
	if bool then wait()
    	local Cam = workspace.CurrentCamera
    	local Pos, Char = Cam.CFrame, speaker.Character
    	local Human = Char and Char.FindFirstChildWhichIsA(Char, "Humanoid")
    	local nHuman = Human.Clone(Human)
    	nHuman.Parent, speaker.Character = Char, nil
    	nHuman.SetStateEnabled(nHuman, 15, false)
    	nHuman.SetStateEnabled(nHuman, 1, false)
    	nHuman.SetStateEnabled(nHuman, 0, false)
    	nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
    	speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
    	nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
    	local Script = Char.FindFirstChild(Char, "Animate")
    	if Script then
    		Script.Disabled = true
    		wait()
    		Script.Disabled = false
    	end
    	nHuman.Health = nHuman.MaxHealth
	end
end)

btns:Seperator()

btns:Toggle("Infinite Jump",false, function(bool)
	local inf_jump_toggle = bool

	if inf_jump_toggle == bool then
		local UserInputService = game:GetService("UserInputService")

		local SpaceBar = Enum.KeyCode.Space
		
		local function IsShiftKeyDown()
			return UserInputService:IsKeyDown(SpaceBar) 
		end

		if getgenv().INFJUMP == bool then
			local function Input(input, gameProcessedEvent)
				if not IsShiftKeyDown() then
					print("")
				else
					game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
				end
			end
		end
		
		UserInputService.InputBegan:Connect(Input)
	end
end)

local btns = serv:Channel("Settings")

btns:Toggle("Shadows",false, function(bool)
    game:GetService("Lighting").GlobalShadows = bool
end)

btns:Seperator()

local sldr = btns:Slider("Lighting Brightness!", 0, 200, 0, function(t)
    game:GetService("Lighting").Brightness = t
end)

btns:Seperator()

local sldr = btns:Slider("Exposure!", 0, 200, 0, function(t)
    game:GetService("Lighting").ExposureCompensation = t
end)

btns:Seperator()

btns:Label("Ambient.")

btns:Colorpicker("Ambient", Color3.fromRGB(255, 255, 255), function(t)
    game:GetService("Lighting").Ambient = t
end)

btns:Seperator()

btns:Label("Format | 12:12:12")

btns:Textbox("Time", "Can Only Be Numbers!", true, function(t)
    game:GetService("Lighting").TimeOfDay = t
end)

local btns = serv:Channel("Important!")

btns:Button("Discord Server", function()
    DiscordLib:Notification("Notification", "You will be prompted a discord invite.", "Okay!")
        	local http = game:GetService('HttpService') 
	if toClipboard then
		toClipboard('https://discord.gg/DMTKwpEWnR')
	else
	end
	local req = syn and syn.request or http and http.request or http_request or fluxus and fluxus.request or getgenv().request or request
	if req then
		req({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = http:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = http:GenerateGUID(false),
				args = {code = 'GYrTQEryum'}
			})
		})
	end
end)

btns:Seperator()

btns:Button("Owner + Scripter", function()
    if setclipboard then 
        setclipboard("sunken#0001")
    elseif toClipboard then 
        toClipboard("sunken#0001")
    end
end)
